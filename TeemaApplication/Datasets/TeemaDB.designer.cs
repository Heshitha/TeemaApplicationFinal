#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TeemaApplication.Datasets
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TeemaFinalDB")]
	public partial class TeemaDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDesignation(Designation instance);
    partial void UpdateDesignation(Designation instance);
    partial void DeleteDesignation(Designation instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertFixedIncentiveAllowance(FixedIncentiveAllowance instance);
    partial void UpdateFixedIncentiveAllowance(FixedIncentiveAllowance instance);
    partial void DeleteFixedIncentiveAllowance(FixedIncentiveAllowance instance);
    partial void InsertSubDepartment(SubDepartment instance);
    partial void UpdateSubDepartment(SubDepartment instance);
    partial void DeleteSubDepartment(SubDepartment instance);
    partial void InsertUserAccount(UserAccount instance);
    partial void UpdateUserAccount(UserAccount instance);
    partial void DeleteUserAccount(UserAccount instance);
    partial void InsertSalaryDetail(SalaryDetail instance);
    partial void UpdateSalaryDetail(SalaryDetail instance);
    partial void DeleteSalaryDetail(SalaryDetail instance);
    partial void InsertVariableIncentiveAllowance(VariableIncentiveAllowance instance);
    partial void UpdateVariableIncentiveAllowance(VariableIncentiveAllowance instance);
    partial void DeleteVariableIncentiveAllowance(VariableIncentiveAllowance instance);
    partial void InsertOverTimeRecord(OverTimeRecord instance);
    partial void UpdateOverTimeRecord(OverTimeRecord instance);
    partial void DeleteOverTimeRecord(OverTimeRecord instance);
    partial void InsertOvertimeEmployeeDetail(OvertimeEmployeeDetail instance);
    partial void UpdateOvertimeEmployeeDetail(OvertimeEmployeeDetail instance);
    partial void DeleteOvertimeEmployeeDetail(OvertimeEmployeeDetail instance);
    partial void InsertSalaryAdvance(SalaryAdvance instance);
    partial void UpdateSalaryAdvance(SalaryAdvance instance);
    partial void DeleteSalaryAdvance(SalaryAdvance instance);
    partial void InsertSalaryAdvanceEmployeeDetail(SalaryAdvanceEmployeeDetail instance);
    partial void UpdateSalaryAdvanceEmployeeDetail(SalaryAdvanceEmployeeDetail instance);
    partial void DeleteSalaryAdvanceEmployeeDetail(SalaryAdvanceEmployeeDetail instance);
    partial void InsertPieceRateDetail(PieceRateDetail instance);
    partial void UpdatePieceRateDetail(PieceRateDetail instance);
    partial void DeletePieceRateDetail(PieceRateDetail instance);
    partial void InsertEnteredPieceRateForEmployee(EnteredPieceRateForEmployee instance);
    partial void UpdateEnteredPieceRateForEmployee(EnteredPieceRateForEmployee instance);
    partial void DeleteEnteredPieceRateForEmployee(EnteredPieceRateForEmployee instance);
    partial void InsertAvaragePieceRateForEmployee(AvaragePieceRateForEmployee instance);
    partial void UpdateAvaragePieceRateForEmployee(AvaragePieceRateForEmployee instance);
    partial void DeleteAvaragePieceRateForEmployee(AvaragePieceRateForEmployee instance);
    partial void InsertFingerPrintDivice(FingerPrintDivice instance);
    partial void UpdateFingerPrintDivice(FingerPrintDivice instance);
    partial void DeleteFingerPrintDivice(FingerPrintDivice instance);
    #endregion
		
		public TeemaDBDataContext() : 
				base(global::TeemaApplication.Properties.Settings.Default.TeemaFinalDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TeemaDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeemaDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeemaDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeemaDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Designation> Designations
		{
			get
			{
				return this.GetTable<Designation>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<FixedIncentiveAllowance> FixedIncentiveAllowances
		{
			get
			{
				return this.GetTable<FixedIncentiveAllowance>();
			}
		}
		
		public System.Data.Linq.Table<SubDepartment> SubDepartments
		{
			get
			{
				return this.GetTable<SubDepartment>();
			}
		}
		
		public System.Data.Linq.Table<UserAccount> UserAccounts
		{
			get
			{
				return this.GetTable<UserAccount>();
			}
		}
		
		public System.Data.Linq.Table<SalaryDetail> SalaryDetails
		{
			get
			{
				return this.GetTable<SalaryDetail>();
			}
		}
		
		public System.Data.Linq.Table<VariableIncentiveAllowance> VariableIncentiveAllowances
		{
			get
			{
				return this.GetTable<VariableIncentiveAllowance>();
			}
		}
		
		public System.Data.Linq.Table<OverTimeRecord> OverTimeRecords
		{
			get
			{
				return this.GetTable<OverTimeRecord>();
			}
		}
		
		public System.Data.Linq.Table<OvertimeEmployeeDetail> OvertimeEmployeeDetails
		{
			get
			{
				return this.GetTable<OvertimeEmployeeDetail>();
			}
		}
		
		public System.Data.Linq.Table<SalaryAdvance> SalaryAdvances
		{
			get
			{
				return this.GetTable<SalaryAdvance>();
			}
		}
		
		public System.Data.Linq.Table<SalaryAdvanceEmployeeDetail> SalaryAdvanceEmployeeDetails
		{
			get
			{
				return this.GetTable<SalaryAdvanceEmployeeDetail>();
			}
		}
		
		public System.Data.Linq.Table<PieceRateDetail> PieceRateDetails
		{
			get
			{
				return this.GetTable<PieceRateDetail>();
			}
		}
		
		public System.Data.Linq.Table<EnteredPieceRateForEmployee> EnteredPieceRateForEmployees
		{
			get
			{
				return this.GetTable<EnteredPieceRateForEmployee>();
			}
		}
		
		public System.Data.Linq.Table<AvaragePieceRateForEmployee> AvaragePieceRateForEmployees
		{
			get
			{
				return this.GetTable<AvaragePieceRateForEmployee>();
			}
		}
		
		public System.Data.Linq.Table<FingerPrintDivice> FingerPrintDivices
		{
			get
			{
				return this.GetTable<FingerPrintDivice>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branch")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchID;
		
		private string _BranchName;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Department> _Departments;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIDChanging(int value);
    partial void OnBranchIDChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Branch()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Department", Storage="_Departments", ThisKey="BranchID", OtherKey="BranchID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Branch", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Branches.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Branches.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Branch1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.Branches1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.Branches1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _DepartmentName;
		
		private int _BranchID;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<SubDepartment> _SubDepartments;
		
		private EntitySet<SalaryAdvance> _SalaryAdvances;
		
		private EntitySet<PieceRateDetail> _PieceRateDetails;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnBranchIDChanging(int value);
    partial void OnBranchIDChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Department()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._SubDepartments = new EntitySet<SubDepartment>(new Action<SubDepartment>(this.attach_SubDepartments), new Action<SubDepartment>(this.detach_SubDepartments));
			this._SalaryAdvances = new EntitySet<SalaryAdvance>(new Action<SalaryAdvance>(this.attach_SalaryAdvances), new Action<SalaryAdvance>(this.detach_SalaryAdvances));
			this._PieceRateDetails = new EntitySet<PieceRateDetail>(new Action<PieceRateDetail>(this.attach_PieceRateDetails), new Action<PieceRateDetail>(this.detach_PieceRateDetails));
			this._Branch = default(EntityRef<Branch>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchID", DbType="Int NOT NULL")]
		public int BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_SubDepartment", Storage="_SubDepartments", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<SubDepartment> SubDepartments
		{
			get
			{
				return this._SubDepartments;
			}
			set
			{
				this._SubDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_SalaryAdvance", Storage="_SalaryAdvances", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<SalaryAdvance> SalaryAdvances
		{
			get
			{
				return this._SalaryAdvances;
			}
			set
			{
				this._SalaryAdvances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_PieceRateDetail", Storage="_PieceRateDetails", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<PieceRateDetail> PieceRateDetails
		{
			get
			{
				return this._PieceRateDetails;
			}
			set
			{
				this._PieceRateDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Department", Storage="_Branch", ThisKey="BranchID", OtherKey="BranchID", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._BranchID = value.BranchID;
					}
					else
					{
						this._BranchID = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Department", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Department1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.Departments1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.Departments1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_SubDepartments(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_SubDepartments(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_SalaryAdvances(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_SalaryAdvances(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_PieceRateDetails(PieceRateDetail entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_PieceRateDetails(PieceRateDetail entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Designation")]
	public partial class Designation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DesignationID;
		
		private string _Designation1;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignationIDChanging(int value);
    partial void OnDesignationIDChanged();
    partial void OnDesignation1Changing(string value);
    partial void OnDesignation1Changed();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Designation()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DesignationID
		{
			get
			{
				return this._DesignationID;
			}
			set
			{
				if ((this._DesignationID != value))
				{
					this.OnDesignationIDChanging(value);
					this.SendPropertyChanging();
					this._DesignationID = value;
					this.SendPropertyChanged("DesignationID");
					this.OnDesignationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Designation", Storage="_Designation1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Designation1
		{
			get
			{
				return this._Designation1;
			}
			set
			{
				if ((this._Designation1 != value))
				{
					this.OnDesignation1Changing(value);
					this.SendPropertyChanging();
					this._Designation1 = value;
					this.SendPropertyChanged("Designation1");
					this.OnDesignation1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designation_Employee", Storage="_Employees", ThisKey="DesignationID", OtherKey="DesignationID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Designation", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Designations.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Designations.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Designation1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.Designations1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.Designations1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Designation = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Designation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _Name;
		
		private string _Gender;
		
		private int _DesignationID;
		
		private int _TokenNo;
		
		private string _EPFNo;
		
		private string _NICNo;
		
		private System.DateTime _DateOfAppointed;
		
		private string _EmployeeCatagory;
		
		private string _EmployeeGrade;
		
		private bool _IsEPFApply;
		
		private bool _IsPieceRateApply;
		
		private int _DepartmentID;
		
		private System.Nullable<int> _SubDepartmentID;
		
		private bool _IsAssignedToSubDepartment;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<FixedIncentiveAllowance> _FixedIncentiveAllowances;
		
		private EntityRef<SalaryDetail> _SalaryDetail;
		
		private EntitySet<VariableIncentiveAllowance> _VariableIncentiveAllowances;
		
		private EntitySet<OvertimeEmployeeDetail> _OvertimeEmployeeDetails;
		
		private EntitySet<SalaryAdvanceEmployeeDetail> _SalaryAdvanceEmployeeDetails;
		
		private EntitySet<EnteredPieceRateForEmployee> _EnteredPieceRateForEmployees;
		
		private EntitySet<AvaragePieceRateForEmployee> _AvaragePieceRateForEmployees;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Designation> _Designation;
		
		private EntityRef<SubDepartment> _SubDepartment;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDesignationIDChanging(int value);
    partial void OnDesignationIDChanged();
    partial void OnTokenNoChanging(int value);
    partial void OnTokenNoChanged();
    partial void OnEPFNoChanging(string value);
    partial void OnEPFNoChanged();
    partial void OnNICNoChanging(string value);
    partial void OnNICNoChanged();
    partial void OnDateOfAppointedChanging(System.DateTime value);
    partial void OnDateOfAppointedChanged();
    partial void OnEmployeeCatagoryChanging(string value);
    partial void OnEmployeeCatagoryChanged();
    partial void OnEmployeeGradeChanging(string value);
    partial void OnEmployeeGradeChanged();
    partial void OnIsEPFApplyChanging(bool value);
    partial void OnIsEPFApplyChanged();
    partial void OnIsPieceRateApplyChanging(bool value);
    partial void OnIsPieceRateApplyChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnSubDepartmentIDChanging(System.Nullable<int> value);
    partial void OnSubDepartmentIDChanged();
    partial void OnIsAssignedToSubDepartmentChanging(bool value);
    partial void OnIsAssignedToSubDepartmentChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Employee()
		{
			this._FixedIncentiveAllowances = new EntitySet<FixedIncentiveAllowance>(new Action<FixedIncentiveAllowance>(this.attach_FixedIncentiveAllowances), new Action<FixedIncentiveAllowance>(this.detach_FixedIncentiveAllowances));
			this._SalaryDetail = default(EntityRef<SalaryDetail>);
			this._VariableIncentiveAllowances = new EntitySet<VariableIncentiveAllowance>(new Action<VariableIncentiveAllowance>(this.attach_VariableIncentiveAllowances), new Action<VariableIncentiveAllowance>(this.detach_VariableIncentiveAllowances));
			this._OvertimeEmployeeDetails = new EntitySet<OvertimeEmployeeDetail>(new Action<OvertimeEmployeeDetail>(this.attach_OvertimeEmployeeDetails), new Action<OvertimeEmployeeDetail>(this.detach_OvertimeEmployeeDetails));
			this._SalaryAdvanceEmployeeDetails = new EntitySet<SalaryAdvanceEmployeeDetail>(new Action<SalaryAdvanceEmployeeDetail>(this.attach_SalaryAdvanceEmployeeDetails), new Action<SalaryAdvanceEmployeeDetail>(this.detach_SalaryAdvanceEmployeeDetails));
			this._EnteredPieceRateForEmployees = new EntitySet<EnteredPieceRateForEmployee>(new Action<EnteredPieceRateForEmployee>(this.attach_EnteredPieceRateForEmployees), new Action<EnteredPieceRateForEmployee>(this.detach_EnteredPieceRateForEmployees));
			this._AvaragePieceRateForEmployees = new EntitySet<AvaragePieceRateForEmployee>(new Action<AvaragePieceRateForEmployee>(this.attach_AvaragePieceRateForEmployees), new Action<AvaragePieceRateForEmployee>(this.detach_AvaragePieceRateForEmployees));
			this._Department = default(EntityRef<Department>);
			this._Designation = default(EntityRef<Designation>);
			this._SubDepartment = default(EntityRef<SubDepartment>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationID", DbType="Int NOT NULL")]
		public int DesignationID
		{
			get
			{
				return this._DesignationID;
			}
			set
			{
				if ((this._DesignationID != value))
				{
					if (this._Designation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignationIDChanging(value);
					this.SendPropertyChanging();
					this._DesignationID = value;
					this.SendPropertyChanged("DesignationID");
					this.OnDesignationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenNo", DbType="Int NOT NULL")]
		public int TokenNo
		{
			get
			{
				return this._TokenNo;
			}
			set
			{
				if ((this._TokenNo != value))
				{
					this.OnTokenNoChanging(value);
					this.SendPropertyChanging();
					this._TokenNo = value;
					this.SendPropertyChanged("TokenNo");
					this.OnTokenNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPFNo", DbType="VarChar(50)")]
		public string EPFNo
		{
			get
			{
				return this._EPFNo;
			}
			set
			{
				if ((this._EPFNo != value))
				{
					this.OnEPFNoChanging(value);
					this.SendPropertyChanging();
					this._EPFNo = value;
					this.SendPropertyChanged("EPFNo");
					this.OnEPFNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NICNo", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string NICNo
		{
			get
			{
				return this._NICNo;
			}
			set
			{
				if ((this._NICNo != value))
				{
					this.OnNICNoChanging(value);
					this.SendPropertyChanging();
					this._NICNo = value;
					this.SendPropertyChanged("NICNo");
					this.OnNICNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAppointed", DbType="Date NOT NULL")]
		public System.DateTime DateOfAppointed
		{
			get
			{
				return this._DateOfAppointed;
			}
			set
			{
				if ((this._DateOfAppointed != value))
				{
					this.OnDateOfAppointedChanging(value);
					this.SendPropertyChanging();
					this._DateOfAppointed = value;
					this.SendPropertyChanged("DateOfAppointed");
					this.OnDateOfAppointedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeCatagory", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeCatagory
		{
			get
			{
				return this._EmployeeCatagory;
			}
			set
			{
				if ((this._EmployeeCatagory != value))
				{
					this.OnEmployeeCatagoryChanging(value);
					this.SendPropertyChanging();
					this._EmployeeCatagory = value;
					this.SendPropertyChanged("EmployeeCatagory");
					this.OnEmployeeCatagoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeGrade", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeGrade
		{
			get
			{
				return this._EmployeeGrade;
			}
			set
			{
				if ((this._EmployeeGrade != value))
				{
					this.OnEmployeeGradeChanging(value);
					this.SendPropertyChanging();
					this._EmployeeGrade = value;
					this.SendPropertyChanged("EmployeeGrade");
					this.OnEmployeeGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEPFApply", DbType="Bit NOT NULL")]
		public bool IsEPFApply
		{
			get
			{
				return this._IsEPFApply;
			}
			set
			{
				if ((this._IsEPFApply != value))
				{
					this.OnIsEPFApplyChanging(value);
					this.SendPropertyChanging();
					this._IsEPFApply = value;
					this.SendPropertyChanged("IsEPFApply");
					this.OnIsEPFApplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPieceRateApply", DbType="Bit NOT NULL")]
		public bool IsPieceRateApply
		{
			get
			{
				return this._IsPieceRateApply;
			}
			set
			{
				if ((this._IsPieceRateApply != value))
				{
					this.OnIsPieceRateApplyChanging(value);
					this.SendPropertyChanging();
					this._IsPieceRateApply = value;
					this.SendPropertyChanged("IsPieceRateApply");
					this.OnIsPieceRateApplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDepartmentID", DbType="Int")]
		public System.Nullable<int> SubDepartmentID
		{
			get
			{
				return this._SubDepartmentID;
			}
			set
			{
				if ((this._SubDepartmentID != value))
				{
					if (this._SubDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._SubDepartmentID = value;
					this.SendPropertyChanged("SubDepartmentID");
					this.OnSubDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAssignedToSubDepartment", DbType="Bit NOT NULL")]
		public bool IsAssignedToSubDepartment
		{
			get
			{
				return this._IsAssignedToSubDepartment;
			}
			set
			{
				if ((this._IsAssignedToSubDepartment != value))
				{
					this.OnIsAssignedToSubDepartmentChanging(value);
					this.SendPropertyChanging();
					this._IsAssignedToSubDepartment = value;
					this.SendPropertyChanged("IsAssignedToSubDepartment");
					this.OnIsAssignedToSubDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FixedIncentiveAllowance", Storage="_FixedIncentiveAllowances", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<FixedIncentiveAllowance> FixedIncentiveAllowances
		{
			get
			{
				return this._FixedIncentiveAllowances;
			}
			set
			{
				this._FixedIncentiveAllowances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryDetail", Storage="_SalaryDetail", ThisKey="EmployeeID", OtherKey="EmployeeID", IsUnique=true, IsForeignKey=false)]
		public SalaryDetail SalaryDetail
		{
			get
			{
				return this._SalaryDetail.Entity;
			}
			set
			{
				SalaryDetail previousValue = this._SalaryDetail.Entity;
				if (((previousValue != value) 
							|| (this._SalaryDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalaryDetail.Entity = null;
						previousValue.Employee = null;
					}
					this._SalaryDetail.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("SalaryDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_VariableIncentiveAllowance", Storage="_VariableIncentiveAllowances", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<VariableIncentiveAllowance> VariableIncentiveAllowances
		{
			get
			{
				return this._VariableIncentiveAllowances;
			}
			set
			{
				this._VariableIncentiveAllowances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OvertimeEmployeeDetail", Storage="_OvertimeEmployeeDetails", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<OvertimeEmployeeDetail> OvertimeEmployeeDetails
		{
			get
			{
				return this._OvertimeEmployeeDetails;
			}
			set
			{
				this._OvertimeEmployeeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryAdvanceEmployeeDetail", Storage="_SalaryAdvanceEmployeeDetails", ThisKey="EmployeeID", OtherKey="EmpID")]
		public EntitySet<SalaryAdvanceEmployeeDetail> SalaryAdvanceEmployeeDetails
		{
			get
			{
				return this._SalaryAdvanceEmployeeDetails;
			}
			set
			{
				this._SalaryAdvanceEmployeeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EnteredPieceRateForEmployee", Storage="_EnteredPieceRateForEmployees", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EnteredPieceRateForEmployee> EnteredPieceRateForEmployees
		{
			get
			{
				return this._EnteredPieceRateForEmployees;
			}
			set
			{
				this._EnteredPieceRateForEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AvaragePieceRateForEmployee", Storage="_AvaragePieceRateForEmployees", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<AvaragePieceRateForEmployee> AvaragePieceRateForEmployees
		{
			get
			{
				return this._AvaragePieceRateForEmployees;
			}
			set
			{
				this._AvaragePieceRateForEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designation_Employee", Storage="_Designation", ThisKey="DesignationID", OtherKey="DesignationID", IsForeignKey=true)]
		public Designation Designation
		{
			get
			{
				return this._Designation.Entity;
			}
			set
			{
				Designation previousValue = this._Designation.Entity;
				if (((previousValue != value) 
							|| (this._Designation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designation.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Designation.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DesignationID = value.DesignationID;
					}
					else
					{
						this._DesignationID = default(int);
					}
					this.SendPropertyChanged("Designation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubDepartment_Employee", Storage="_SubDepartment", ThisKey="SubDepartmentID", OtherKey="SubDepartmentID", IsForeignKey=true)]
		public SubDepartment SubDepartment
		{
			get
			{
				return this._SubDepartment.Entity;
			}
			set
			{
				SubDepartment previousValue = this._SubDepartment.Entity;
				if (((previousValue != value) 
							|| (this._SubDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubDepartment.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._SubDepartment.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._SubDepartmentID = value.SubDepartmentID;
					}
					else
					{
						this._SubDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Employee", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Employee1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.Employees1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.Employees1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FixedIncentiveAllowances(FixedIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FixedIncentiveAllowances(FixedIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_VariableIncentiveAllowances(VariableIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_VariableIncentiveAllowances(VariableIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_OvertimeEmployeeDetails(OvertimeEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OvertimeEmployeeDetails(OvertimeEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SalaryAdvanceEmployeeDetails(SalaryAdvanceEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SalaryAdvanceEmployeeDetails(SalaryAdvanceEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EnteredPieceRateForEmployees(EnteredPieceRateForEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EnteredPieceRateForEmployees(EnteredPieceRateForEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_AvaragePieceRateForEmployees(AvaragePieceRateForEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_AvaragePieceRateForEmployees(AvaragePieceRateForEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FixedIncentiveAllowance")]
	public partial class FixedIncentiveAllowance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FIAID;
		
		private int _EmployeeID;
		
		private string _Type;
		
		private double _Value;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFIAIDChanging(int value);
    partial void OnFIAIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public FixedIncentiveAllowance()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIAID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FIAID
		{
			get
			{
				return this._FIAID;
			}
			set
			{
				if ((this._FIAID != value))
				{
					this.OnFIAIDChanging(value);
					this.SendPropertyChanging();
					this._FIAID = value;
					this.SendPropertyChanged("FIAID");
					this.OnFIAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FixedIncentiveAllowance", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FixedIncentiveAllowances.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FixedIncentiveAllowances.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FixedIncentiveAllowance", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.FixedIncentiveAllowances.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.FixedIncentiveAllowances.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FixedIncentiveAllowance1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.FixedIncentiveAllowances1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.FixedIncentiveAllowances1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubDepartment")]
	public partial class SubDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubDepartmentID;
		
		private string _SubDepartmentName;
		
		private int _DepartmentID;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubDepartmentIDChanging(int value);
    partial void OnSubDepartmentIDChanged();
    partial void OnSubDepartmentNameChanging(string value);
    partial void OnSubDepartmentNameChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SubDepartment()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Department = default(EntityRef<Department>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubDepartmentID
		{
			get
			{
				return this._SubDepartmentID;
			}
			set
			{
				if ((this._SubDepartmentID != value))
				{
					this.OnSubDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._SubDepartmentID = value;
					this.SendPropertyChanged("SubDepartmentID");
					this.OnSubDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDepartmentName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SubDepartmentName
		{
			get
			{
				return this._SubDepartmentName;
			}
			set
			{
				if ((this._SubDepartmentName != value))
				{
					this.OnSubDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._SubDepartmentName = value;
					this.SendPropertyChanged("SubDepartmentName");
					this.OnSubDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubDepartment_Employee", Storage="_Employees", ThisKey="SubDepartmentID", OtherKey="SubDepartmentID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_SubDepartment", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.SubDepartments.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.SubDepartments.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SubDepartment", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.SubDepartments.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.SubDepartments.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SubDepartment1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.SubDepartments1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.SubDepartments1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SubDepartment = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SubDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccount")]
	public partial class UserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Name;
		
		private string _UserName;
		
		private string _Password;
		
		private int _Priviledge;
		
		private EntitySet<Branch> _Branches;
		
		private EntitySet<Branch> _Branches1;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Department> _Departments1;
		
		private EntitySet<Designation> _Designations;
		
		private EntitySet<Designation> _Designations1;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Employee> _Employees1;
		
		private EntitySet<FixedIncentiveAllowance> _FixedIncentiveAllowances;
		
		private EntitySet<FixedIncentiveAllowance> _FixedIncentiveAllowances1;
		
		private EntitySet<SubDepartment> _SubDepartments;
		
		private EntitySet<SubDepartment> _SubDepartments1;
		
		private EntitySet<SalaryDetail> _SalaryDetails;
		
		private EntitySet<SalaryDetail> _SalaryDetails1;
		
		private EntitySet<VariableIncentiveAllowance> _VariableIncentiveAllowances;
		
		private EntitySet<VariableIncentiveAllowance> _VariableIncentiveAllowances1;
		
		private EntitySet<OverTimeRecord> _OverTimeRecords;
		
		private EntitySet<OverTimeRecord> _OverTimeRecords1;
		
		private EntitySet<OverTimeRecord> _OverTimeRecords2;
		
		private EntitySet<OvertimeEmployeeDetail> _OvertimeEmployeeDetails;
		
		private EntitySet<OvertimeEmployeeDetail> _OvertimeEmployeeDetails1;
		
		private EntitySet<SalaryAdvance> _SalaryAdvances;
		
		private EntitySet<SalaryAdvance> _SalaryAdvances1;
		
		private EntitySet<SalaryAdvanceEmployeeDetail> _SalaryAdvanceEmployeeDetails;
		
		private EntitySet<SalaryAdvanceEmployeeDetail> _SalaryAdvanceEmployeeDetails1;
		
		private EntitySet<PieceRateDetail> _PieceRateDetails;
		
		private EntitySet<PieceRateDetail> _PieceRateDetails1;
		
		private EntitySet<FingerPrintDivice> _FingerPrintDivices;
		
		private EntitySet<FingerPrintDivice> _FingerPrintDivices1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPriviledgeChanging(int value);
    partial void OnPriviledgeChanged();
    #endregion
		
		public UserAccount()
		{
			this._Branches = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches), new Action<Branch>(this.detach_Branches));
			this._Branches1 = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches1), new Action<Branch>(this.detach_Branches1));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Departments1 = new EntitySet<Department>(new Action<Department>(this.attach_Departments1), new Action<Department>(this.detach_Departments1));
			this._Designations = new EntitySet<Designation>(new Action<Designation>(this.attach_Designations), new Action<Designation>(this.detach_Designations));
			this._Designations1 = new EntitySet<Designation>(new Action<Designation>(this.attach_Designations1), new Action<Designation>(this.detach_Designations1));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Employees1 = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees1), new Action<Employee>(this.detach_Employees1));
			this._FixedIncentiveAllowances = new EntitySet<FixedIncentiveAllowance>(new Action<FixedIncentiveAllowance>(this.attach_FixedIncentiveAllowances), new Action<FixedIncentiveAllowance>(this.detach_FixedIncentiveAllowances));
			this._FixedIncentiveAllowances1 = new EntitySet<FixedIncentiveAllowance>(new Action<FixedIncentiveAllowance>(this.attach_FixedIncentiveAllowances1), new Action<FixedIncentiveAllowance>(this.detach_FixedIncentiveAllowances1));
			this._SubDepartments = new EntitySet<SubDepartment>(new Action<SubDepartment>(this.attach_SubDepartments), new Action<SubDepartment>(this.detach_SubDepartments));
			this._SubDepartments1 = new EntitySet<SubDepartment>(new Action<SubDepartment>(this.attach_SubDepartments1), new Action<SubDepartment>(this.detach_SubDepartments1));
			this._SalaryDetails = new EntitySet<SalaryDetail>(new Action<SalaryDetail>(this.attach_SalaryDetails), new Action<SalaryDetail>(this.detach_SalaryDetails));
			this._SalaryDetails1 = new EntitySet<SalaryDetail>(new Action<SalaryDetail>(this.attach_SalaryDetails1), new Action<SalaryDetail>(this.detach_SalaryDetails1));
			this._VariableIncentiveAllowances = new EntitySet<VariableIncentiveAllowance>(new Action<VariableIncentiveAllowance>(this.attach_VariableIncentiveAllowances), new Action<VariableIncentiveAllowance>(this.detach_VariableIncentiveAllowances));
			this._VariableIncentiveAllowances1 = new EntitySet<VariableIncentiveAllowance>(new Action<VariableIncentiveAllowance>(this.attach_VariableIncentiveAllowances1), new Action<VariableIncentiveAllowance>(this.detach_VariableIncentiveAllowances1));
			this._OverTimeRecords = new EntitySet<OverTimeRecord>(new Action<OverTimeRecord>(this.attach_OverTimeRecords), new Action<OverTimeRecord>(this.detach_OverTimeRecords));
			this._OverTimeRecords1 = new EntitySet<OverTimeRecord>(new Action<OverTimeRecord>(this.attach_OverTimeRecords1), new Action<OverTimeRecord>(this.detach_OverTimeRecords1));
			this._OverTimeRecords2 = new EntitySet<OverTimeRecord>(new Action<OverTimeRecord>(this.attach_OverTimeRecords2), new Action<OverTimeRecord>(this.detach_OverTimeRecords2));
			this._OvertimeEmployeeDetails = new EntitySet<OvertimeEmployeeDetail>(new Action<OvertimeEmployeeDetail>(this.attach_OvertimeEmployeeDetails), new Action<OvertimeEmployeeDetail>(this.detach_OvertimeEmployeeDetails));
			this._OvertimeEmployeeDetails1 = new EntitySet<OvertimeEmployeeDetail>(new Action<OvertimeEmployeeDetail>(this.attach_OvertimeEmployeeDetails1), new Action<OvertimeEmployeeDetail>(this.detach_OvertimeEmployeeDetails1));
			this._SalaryAdvances = new EntitySet<SalaryAdvance>(new Action<SalaryAdvance>(this.attach_SalaryAdvances), new Action<SalaryAdvance>(this.detach_SalaryAdvances));
			this._SalaryAdvances1 = new EntitySet<SalaryAdvance>(new Action<SalaryAdvance>(this.attach_SalaryAdvances1), new Action<SalaryAdvance>(this.detach_SalaryAdvances1));
			this._SalaryAdvanceEmployeeDetails = new EntitySet<SalaryAdvanceEmployeeDetail>(new Action<SalaryAdvanceEmployeeDetail>(this.attach_SalaryAdvanceEmployeeDetails), new Action<SalaryAdvanceEmployeeDetail>(this.detach_SalaryAdvanceEmployeeDetails));
			this._SalaryAdvanceEmployeeDetails1 = new EntitySet<SalaryAdvanceEmployeeDetail>(new Action<SalaryAdvanceEmployeeDetail>(this.attach_SalaryAdvanceEmployeeDetails1), new Action<SalaryAdvanceEmployeeDetail>(this.detach_SalaryAdvanceEmployeeDetails1));
			this._PieceRateDetails = new EntitySet<PieceRateDetail>(new Action<PieceRateDetail>(this.attach_PieceRateDetails), new Action<PieceRateDetail>(this.detach_PieceRateDetails));
			this._PieceRateDetails1 = new EntitySet<PieceRateDetail>(new Action<PieceRateDetail>(this.attach_PieceRateDetails1), new Action<PieceRateDetail>(this.detach_PieceRateDetails1));
			this._FingerPrintDivices = new EntitySet<FingerPrintDivice>(new Action<FingerPrintDivice>(this.attach_FingerPrintDivices), new Action<FingerPrintDivice>(this.detach_FingerPrintDivices));
			this._FingerPrintDivices1 = new EntitySet<FingerPrintDivice>(new Action<FingerPrintDivice>(this.attach_FingerPrintDivices1), new Action<FingerPrintDivice>(this.detach_FingerPrintDivices1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priviledge", DbType="Int NOT NULL")]
		public int Priviledge
		{
			get
			{
				return this._Priviledge;
			}
			set
			{
				if ((this._Priviledge != value))
				{
					this.OnPriviledgeChanging(value);
					this.SendPropertyChanging();
					this._Priviledge = value;
					this.SendPropertyChanged("Priviledge");
					this.OnPriviledgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Branch", Storage="_Branches", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Branch> Branches
		{
			get
			{
				return this._Branches;
			}
			set
			{
				this._Branches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Branch1", Storage="_Branches1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<Branch> Branches1
		{
			get
			{
				return this._Branches1;
			}
			set
			{
				this._Branches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Department", Storage="_Departments", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Department1", Storage="_Departments1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<Department> Departments1
		{
			get
			{
				return this._Departments1;
			}
			set
			{
				this._Departments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Designation", Storage="_Designations", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Designation> Designations
		{
			get
			{
				return this._Designations;
			}
			set
			{
				this._Designations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Designation1", Storage="_Designations1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<Designation> Designations1
		{
			get
			{
				return this._Designations1;
			}
			set
			{
				this._Designations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Employee", Storage="_Employees", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Employee1", Storage="_Employees1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<Employee> Employees1
		{
			get
			{
				return this._Employees1;
			}
			set
			{
				this._Employees1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FixedIncentiveAllowance", Storage="_FixedIncentiveAllowances", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<FixedIncentiveAllowance> FixedIncentiveAllowances
		{
			get
			{
				return this._FixedIncentiveAllowances;
			}
			set
			{
				this._FixedIncentiveAllowances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FixedIncentiveAllowance1", Storage="_FixedIncentiveAllowances1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<FixedIncentiveAllowance> FixedIncentiveAllowances1
		{
			get
			{
				return this._FixedIncentiveAllowances1;
			}
			set
			{
				this._FixedIncentiveAllowances1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SubDepartment", Storage="_SubDepartments", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<SubDepartment> SubDepartments
		{
			get
			{
				return this._SubDepartments;
			}
			set
			{
				this._SubDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SubDepartment1", Storage="_SubDepartments1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<SubDepartment> SubDepartments1
		{
			get
			{
				return this._SubDepartments1;
			}
			set
			{
				this._SubDepartments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryDetail", Storage="_SalaryDetails", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<SalaryDetail> SalaryDetails
		{
			get
			{
				return this._SalaryDetails;
			}
			set
			{
				this._SalaryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryDetail1", Storage="_SalaryDetails1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<SalaryDetail> SalaryDetails1
		{
			get
			{
				return this._SalaryDetails1;
			}
			set
			{
				this._SalaryDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_VariableIncentiveAllowance", Storage="_VariableIncentiveAllowances", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<VariableIncentiveAllowance> VariableIncentiveAllowances
		{
			get
			{
				return this._VariableIncentiveAllowances;
			}
			set
			{
				this._VariableIncentiveAllowances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_VariableIncentiveAllowance1", Storage="_VariableIncentiveAllowances1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<VariableIncentiveAllowance> VariableIncentiveAllowances1
		{
			get
			{
				return this._VariableIncentiveAllowances1;
			}
			set
			{
				this._VariableIncentiveAllowances1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTimeRecord", Storage="_OverTimeRecords", ThisKey="UserID", OtherKey="ApprovedBy")]
		public EntitySet<OverTimeRecord> OverTimeRecords
		{
			get
			{
				return this._OverTimeRecords;
			}
			set
			{
				this._OverTimeRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTimeRecord1", Storage="_OverTimeRecords1", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<OverTimeRecord> OverTimeRecords1
		{
			get
			{
				return this._OverTimeRecords1;
			}
			set
			{
				this._OverTimeRecords1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTimeRecord2", Storage="_OverTimeRecords2", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<OverTimeRecord> OverTimeRecords2
		{
			get
			{
				return this._OverTimeRecords2;
			}
			set
			{
				this._OverTimeRecords2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OvertimeEmployeeDetail", Storage="_OvertimeEmployeeDetails", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<OvertimeEmployeeDetail> OvertimeEmployeeDetails
		{
			get
			{
				return this._OvertimeEmployeeDetails;
			}
			set
			{
				this._OvertimeEmployeeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OvertimeEmployeeDetail1", Storage="_OvertimeEmployeeDetails1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<OvertimeEmployeeDetail> OvertimeEmployeeDetails1
		{
			get
			{
				return this._OvertimeEmployeeDetails1;
			}
			set
			{
				this._OvertimeEmployeeDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvance", Storage="_SalaryAdvances", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<SalaryAdvance> SalaryAdvances
		{
			get
			{
				return this._SalaryAdvances;
			}
			set
			{
				this._SalaryAdvances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvance1", Storage="_SalaryAdvances1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<SalaryAdvance> SalaryAdvances1
		{
			get
			{
				return this._SalaryAdvances1;
			}
			set
			{
				this._SalaryAdvances1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvanceEmployeeDetail", Storage="_SalaryAdvanceEmployeeDetails", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<SalaryAdvanceEmployeeDetail> SalaryAdvanceEmployeeDetails
		{
			get
			{
				return this._SalaryAdvanceEmployeeDetails;
			}
			set
			{
				this._SalaryAdvanceEmployeeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvanceEmployeeDetail1", Storage="_SalaryAdvanceEmployeeDetails1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<SalaryAdvanceEmployeeDetail> SalaryAdvanceEmployeeDetails1
		{
			get
			{
				return this._SalaryAdvanceEmployeeDetails1;
			}
			set
			{
				this._SalaryAdvanceEmployeeDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_PieceRateDetail", Storage="_PieceRateDetails", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<PieceRateDetail> PieceRateDetails
		{
			get
			{
				return this._PieceRateDetails;
			}
			set
			{
				this._PieceRateDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_PieceRateDetail1", Storage="_PieceRateDetails1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<PieceRateDetail> PieceRateDetails1
		{
			get
			{
				return this._PieceRateDetails1;
			}
			set
			{
				this._PieceRateDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FingerPrintDivice", Storage="_FingerPrintDivices", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<FingerPrintDivice> FingerPrintDivices
		{
			get
			{
				return this._FingerPrintDivices;
			}
			set
			{
				this._FingerPrintDivices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FingerPrintDivice1", Storage="_FingerPrintDivices1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<FingerPrintDivice> FingerPrintDivices1
		{
			get
			{
				return this._FingerPrintDivices1;
			}
			set
			{
				this._FingerPrintDivices1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Branches(Branch entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Branches(Branch entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Branches1(Branch entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_Branches1(Branch entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Departments1(Department entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_Departments1(Department entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_Designations(Designation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Designations(Designation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Designations1(Designation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_Designations1(Designation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Employees1(Employee entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_Employees1(Employee entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_FixedIncentiveAllowances(FixedIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_FixedIncentiveAllowances(FixedIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_FixedIncentiveAllowances1(FixedIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_FixedIncentiveAllowances1(FixedIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_SubDepartments(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_SubDepartments(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_SubDepartments1(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_SubDepartments1(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_SalaryDetails(SalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_SalaryDetails(SalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_SalaryDetails1(SalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_SalaryDetails1(SalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_VariableIncentiveAllowances(VariableIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_VariableIncentiveAllowances(VariableIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_VariableIncentiveAllowances1(VariableIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_VariableIncentiveAllowances1(VariableIncentiveAllowance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_OverTimeRecords(OverTimeRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_OverTimeRecords(OverTimeRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_OverTimeRecords1(OverTimeRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_OverTimeRecords1(OverTimeRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_OverTimeRecords2(OverTimeRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount2 = this;
		}
		
		private void detach_OverTimeRecords2(OverTimeRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount2 = null;
		}
		
		private void attach_OvertimeEmployeeDetails(OvertimeEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_OvertimeEmployeeDetails(OvertimeEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_OvertimeEmployeeDetails1(OvertimeEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_OvertimeEmployeeDetails1(OvertimeEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_SalaryAdvances(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_SalaryAdvances(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_SalaryAdvances1(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_SalaryAdvances1(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_SalaryAdvanceEmployeeDetails(SalaryAdvanceEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_SalaryAdvanceEmployeeDetails(SalaryAdvanceEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_SalaryAdvanceEmployeeDetails1(SalaryAdvanceEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_SalaryAdvanceEmployeeDetails1(SalaryAdvanceEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_PieceRateDetails(PieceRateDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_PieceRateDetails(PieceRateDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_PieceRateDetails1(PieceRateDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_PieceRateDetails1(PieceRateDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_FingerPrintDivices(FingerPrintDivice entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_FingerPrintDivices(FingerPrintDivice entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_FingerPrintDivices1(FingerPrintDivice entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_FingerPrintDivices1(FingerPrintDivice entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalaryDetail")]
	public partial class SalaryDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private int _DateRateOfSalary;
		
		private double _DayRate;
		
		private double _EPFETFTotalSalary;
		
		private double _BasicSalary;
		
		private double _BudgetAllowance;
		
		private System.Nullable<double> _ProductionSalesPerforValue;
		
		private System.Nullable<double> _WorkShopIncentiveValue;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnDateRateOfSalaryChanging(int value);
    partial void OnDateRateOfSalaryChanged();
    partial void OnDayRateChanging(double value);
    partial void OnDayRateChanged();
    partial void OnEPFETFTotalSalaryChanging(double value);
    partial void OnEPFETFTotalSalaryChanged();
    partial void OnBasicSalaryChanging(double value);
    partial void OnBasicSalaryChanged();
    partial void OnBudgetAllowanceChanging(double value);
    partial void OnBudgetAllowanceChanged();
    partial void OnProductionSalesPerforValueChanging(System.Nullable<double> value);
    partial void OnProductionSalesPerforValueChanged();
    partial void OnWorkShopIncentiveValueChanging(System.Nullable<double> value);
    partial void OnWorkShopIncentiveValueChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalaryDetail()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRateOfSalary", DbType="Int NOT NULL")]
		public int DateRateOfSalary
		{
			get
			{
				return this._DateRateOfSalary;
			}
			set
			{
				if ((this._DateRateOfSalary != value))
				{
					this.OnDateRateOfSalaryChanging(value);
					this.SendPropertyChanging();
					this._DateRateOfSalary = value;
					this.SendPropertyChanged("DateRateOfSalary");
					this.OnDateRateOfSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayRate", DbType="Float NOT NULL")]
		public double DayRate
		{
			get
			{
				return this._DayRate;
			}
			set
			{
				if ((this._DayRate != value))
				{
					this.OnDayRateChanging(value);
					this.SendPropertyChanging();
					this._DayRate = value;
					this.SendPropertyChanged("DayRate");
					this.OnDayRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPFETFTotalSalary", DbType="Float NOT NULL")]
		public double EPFETFTotalSalary
		{
			get
			{
				return this._EPFETFTotalSalary;
			}
			set
			{
				if ((this._EPFETFTotalSalary != value))
				{
					this.OnEPFETFTotalSalaryChanging(value);
					this.SendPropertyChanging();
					this._EPFETFTotalSalary = value;
					this.SendPropertyChanged("EPFETFTotalSalary");
					this.OnEPFETFTotalSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Float NOT NULL")]
		public double BasicSalary
		{
			get
			{
				return this._BasicSalary;
			}
			set
			{
				if ((this._BasicSalary != value))
				{
					this.OnBasicSalaryChanging(value);
					this.SendPropertyChanging();
					this._BasicSalary = value;
					this.SendPropertyChanged("BasicSalary");
					this.OnBasicSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetAllowance", DbType="Float NOT NULL")]
		public double BudgetAllowance
		{
			get
			{
				return this._BudgetAllowance;
			}
			set
			{
				if ((this._BudgetAllowance != value))
				{
					this.OnBudgetAllowanceChanging(value);
					this.SendPropertyChanging();
					this._BudgetAllowance = value;
					this.SendPropertyChanged("BudgetAllowance");
					this.OnBudgetAllowanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionSalesPerforValue", DbType="Float")]
		public System.Nullable<double> ProductionSalesPerforValue
		{
			get
			{
				return this._ProductionSalesPerforValue;
			}
			set
			{
				if ((this._ProductionSalesPerforValue != value))
				{
					this.OnProductionSalesPerforValueChanging(value);
					this.SendPropertyChanging();
					this._ProductionSalesPerforValue = value;
					this.SendPropertyChanged("ProductionSalesPerforValue");
					this.OnProductionSalesPerforValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkShopIncentiveValue", DbType="Float")]
		public System.Nullable<double> WorkShopIncentiveValue
		{
			get
			{
				return this._WorkShopIncentiveValue;
			}
			set
			{
				if ((this._WorkShopIncentiveValue != value))
				{
					this.OnWorkShopIncentiveValueChanging(value);
					this.SendPropertyChanging();
					this._WorkShopIncentiveValue = value;
					this.SendPropertyChanged("WorkShopIncentiveValue");
					this.OnWorkShopIncentiveValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryDetail", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SalaryDetail = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SalaryDetail = this;
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryDetail", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.SalaryDetails.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.SalaryDetails.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryDetail1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.SalaryDetails1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.SalaryDetails1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VariableIncentiveAllowance")]
	public partial class VariableIncentiveAllowance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VIAID;
		
		private int _EmployeeID;
		
		private string _Type;
		
		private double _Value;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIAIDChanging(int value);
    partial void OnVIAIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public VariableIncentiveAllowance()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIAID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VIAID
		{
			get
			{
				return this._VIAID;
			}
			set
			{
				if ((this._VIAID != value))
				{
					this.OnVIAIDChanging(value);
					this.SendPropertyChanging();
					this._VIAID = value;
					this.SendPropertyChanged("VIAID");
					this.OnVIAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_VariableIncentiveAllowance", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.VariableIncentiveAllowances.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.VariableIncentiveAllowances.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_VariableIncentiveAllowance", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.VariableIncentiveAllowances.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.VariableIncentiveAllowances.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_VariableIncentiveAllowance1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.VariableIncentiveAllowances1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.VariableIncentiveAllowances1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OverTimeRecord")]
	public partial class OverTimeRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OTID;
		
		private System.DateTime _OvertimeDate;
		
		private string _Supervisor;
		
		private string _Reason;
		
		private System.Nullable<int> _ApprovedBy;
		
		private System.Nullable<System.DateTime> _ApprovedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<OvertimeEmployeeDetail> _OvertimeEmployeeDetails;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
		private EntityRef<UserAccount> _UserAccount2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOTIDChanging(int value);
    partial void OnOTIDChanged();
    partial void OnOvertimeDateChanging(System.DateTime value);
    partial void OnOvertimeDateChanged();
    partial void OnSupervisorChanging(string value);
    partial void OnSupervisorChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public OverTimeRecord()
		{
			this._OvertimeEmployeeDetails = new EntitySet<OvertimeEmployeeDetail>(new Action<OvertimeEmployeeDetail>(this.attach_OvertimeEmployeeDetails), new Action<OvertimeEmployeeDetail>(this.detach_OvertimeEmployeeDetails));
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			this._UserAccount2 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OTID
		{
			get
			{
				return this._OTID;
			}
			set
			{
				if ((this._OTID != value))
				{
					this.OnOTIDChanging(value);
					this.SendPropertyChanging();
					this._OTID = value;
					this.SendPropertyChanged("OTID");
					this.OnOTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OvertimeDate", DbType="DateTime NOT NULL")]
		public System.DateTime OvertimeDate
		{
			get
			{
				return this._OvertimeDate;
			}
			set
			{
				if ((this._OvertimeDate != value))
				{
					this.OnOvertimeDateChanging(value);
					this.SendPropertyChanging();
					this._OvertimeDate = value;
					this.SendPropertyChanged("OvertimeDate");
					this.OnOvertimeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supervisor", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Supervisor
		{
			get
			{
				return this._Supervisor;
			}
			set
			{
				if ((this._Supervisor != value))
				{
					this.OnSupervisorChanging(value);
					this.SendPropertyChanging();
					this._Supervisor = value;
					this.SendPropertyChanged("Supervisor");
					this.OnSupervisorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApprovedDate
		{
			get
			{
				return this._ApprovedDate;
			}
			set
			{
				if ((this._ApprovedDate != value))
				{
					this.OnApprovedDateChanging(value);
					this.SendPropertyChanging();
					this._ApprovedDate = value;
					this.SendPropertyChanged("ApprovedDate");
					this.OnApprovedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OverTimeRecord_OvertimeEmployeeDetail", Storage="_OvertimeEmployeeDetails", ThisKey="OTID", OtherKey="OTID")]
		public EntitySet<OvertimeEmployeeDetail> OvertimeEmployeeDetails
		{
			get
			{
				return this._OvertimeEmployeeDetails;
			}
			set
			{
				this._OvertimeEmployeeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTimeRecord", Storage="_UserAccount", ThisKey="ApprovedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.OverTimeRecords.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.OverTimeRecords.Add(this);
						this._ApprovedBy = value.UserID;
					}
					else
					{
						this._ApprovedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTimeRecord1", Storage="_UserAccount1", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.OverTimeRecords1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.OverTimeRecords1.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTimeRecord2", Storage="_UserAccount2", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount2
		{
			get
			{
				return this._UserAccount2.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount2.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount2.Entity = null;
						previousValue.OverTimeRecords2.Remove(this);
					}
					this._UserAccount2.Entity = value;
					if ((value != null))
					{
						value.OverTimeRecords2.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OvertimeEmployeeDetails(OvertimeEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.OverTimeRecord = this;
		}
		
		private void detach_OvertimeEmployeeDetails(OvertimeEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.OverTimeRecord = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OvertimeEmployeeDetails")]
	public partial class OvertimeEmployeeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OTEmployeeID;
		
		private int _OTID;
		
		private int _EmployeeID;
		
		private string _Operation;
		
		private System.Nullable<System.DateTime> _StartFrom;
		
		private System.Nullable<System.DateTime> _ShiftTo;
		
		private System.Nullable<System.DateTime> _OTFrom;
		
		private System.Nullable<System.DateTime> _OTTo;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<OverTimeRecord> _OverTimeRecord;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOTEmployeeIDChanging(int value);
    partial void OnOTEmployeeIDChanged();
    partial void OnOTIDChanging(int value);
    partial void OnOTIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnStartFromChanging(System.Nullable<System.DateTime> value);
    partial void OnStartFromChanged();
    partial void OnShiftToChanging(System.Nullable<System.DateTime> value);
    partial void OnShiftToChanged();
    partial void OnOTFromChanging(System.Nullable<System.DateTime> value);
    partial void OnOTFromChanged();
    partial void OnOTToChanging(System.Nullable<System.DateTime> value);
    partial void OnOTToChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public OvertimeEmployeeDetail()
		{
			this._Employee = default(EntityRef<Employee>);
			this._OverTimeRecord = default(EntityRef<OverTimeRecord>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTEmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OTEmployeeID
		{
			get
			{
				return this._OTEmployeeID;
			}
			set
			{
				if ((this._OTEmployeeID != value))
				{
					this.OnOTEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._OTEmployeeID = value;
					this.SendPropertyChanged("OTEmployeeID");
					this.OnOTEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTID", DbType="Int NOT NULL")]
		public int OTID
		{
			get
			{
				return this._OTID;
			}
			set
			{
				if ((this._OTID != value))
				{
					if (this._OverTimeRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOTIDChanging(value);
					this.SendPropertyChanging();
					this._OTID = value;
					this.SendPropertyChanged("OTID");
					this.OnOTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="VarChar(500)")]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartFrom
		{
			get
			{
				return this._StartFrom;
			}
			set
			{
				if ((this._StartFrom != value))
				{
					this.OnStartFromChanging(value);
					this.SendPropertyChanging();
					this._StartFrom = value;
					this.SendPropertyChanged("StartFrom");
					this.OnStartFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> ShiftTo
		{
			get
			{
				return this._ShiftTo;
			}
			set
			{
				if ((this._ShiftTo != value))
				{
					this.OnShiftToChanging(value);
					this.SendPropertyChanging();
					this._ShiftTo = value;
					this.SendPropertyChanged("ShiftTo");
					this.OnShiftToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> OTFrom
		{
			get
			{
				return this._OTFrom;
			}
			set
			{
				if ((this._OTFrom != value))
				{
					this.OnOTFromChanging(value);
					this.SendPropertyChanging();
					this._OTFrom = value;
					this.SendPropertyChanged("OTFrom");
					this.OnOTFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> OTTo
		{
			get
			{
				return this._OTTo;
			}
			set
			{
				if ((this._OTTo != value))
				{
					this.OnOTToChanging(value);
					this.SendPropertyChanging();
					this._OTTo = value;
					this.SendPropertyChanged("OTTo");
					this.OnOTToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OvertimeEmployeeDetail", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OvertimeEmployeeDetails.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OvertimeEmployeeDetails.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OverTimeRecord_OvertimeEmployeeDetail", Storage="_OverTimeRecord", ThisKey="OTID", OtherKey="OTID", IsForeignKey=true)]
		public OverTimeRecord OverTimeRecord
		{
			get
			{
				return this._OverTimeRecord.Entity;
			}
			set
			{
				OverTimeRecord previousValue = this._OverTimeRecord.Entity;
				if (((previousValue != value) 
							|| (this._OverTimeRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OverTimeRecord.Entity = null;
						previousValue.OvertimeEmployeeDetails.Remove(this);
					}
					this._OverTimeRecord.Entity = value;
					if ((value != null))
					{
						value.OvertimeEmployeeDetails.Add(this);
						this._OTID = value.OTID;
					}
					else
					{
						this._OTID = default(int);
					}
					this.SendPropertyChanged("OverTimeRecord");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OvertimeEmployeeDetail", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.OvertimeEmployeeDetails.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.OvertimeEmployeeDetails.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OvertimeEmployeeDetail1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.OvertimeEmployeeDetails1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.OvertimeEmployeeDetails1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalaryAdvance")]
	public partial class SalaryAdvance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalaryAdvanceID;
		
		private System.Nullable<System.DateTime> _SalaryMonth;
		
		private System.Nullable<System.DateTime> _RequestDate;
		
		private System.Nullable<int> _DepartmentID;
		
		private System.Nullable<int> _ApprovedBy;
		
		private System.Nullable<System.DateTime> _ApprovedDate;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<SalaryAdvanceEmployeeDetail> _SalaryAdvanceEmployeeDetails;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalaryAdvanceIDChanging(int value);
    partial void OnSalaryAdvanceIDChanged();
    partial void OnSalaryMonthChanging(System.Nullable<System.DateTime> value);
    partial void OnSalaryMonthChanged();
    partial void OnRequestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestDateChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalaryAdvance()
		{
			this._SalaryAdvanceEmployeeDetails = new EntitySet<SalaryAdvanceEmployeeDetail>(new Action<SalaryAdvanceEmployeeDetail>(this.attach_SalaryAdvanceEmployeeDetails), new Action<SalaryAdvanceEmployeeDetail>(this.detach_SalaryAdvanceEmployeeDetails));
			this._Department = default(EntityRef<Department>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryAdvanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalaryAdvanceID
		{
			get
			{
				return this._SalaryAdvanceID;
			}
			set
			{
				if ((this._SalaryAdvanceID != value))
				{
					this.OnSalaryAdvanceIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryAdvanceID = value;
					this.SendPropertyChanged("SalaryAdvanceID");
					this.OnSalaryAdvanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryMonth", DbType="Date")]
		public System.Nullable<System.DateTime> SalaryMonth
		{
			get
			{
				return this._SalaryMonth;
			}
			set
			{
				if ((this._SalaryMonth != value))
				{
					this.OnSalaryMonthChanging(value);
					this.SendPropertyChanging();
					this._SalaryMonth = value;
					this.SendPropertyChanged("SalaryMonth");
					this.OnSalaryMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="Date")]
		public System.Nullable<System.DateTime> RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ApprovedDate
		{
			get
			{
				return this._ApprovedDate;
			}
			set
			{
				if ((this._ApprovedDate != value))
				{
					this.OnApprovedDateChanging(value);
					this.SendPropertyChanging();
					this._ApprovedDate = value;
					this.SendPropertyChanged("ApprovedDate");
					this.OnApprovedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalaryAdvance_SalaryAdvanceEmployeeDetail", Storage="_SalaryAdvanceEmployeeDetails", ThisKey="SalaryAdvanceID", OtherKey="SalaryAdvanceID")]
		public EntitySet<SalaryAdvanceEmployeeDetail> SalaryAdvanceEmployeeDetails
		{
			get
			{
				return this._SalaryAdvanceEmployeeDetails;
			}
			set
			{
				this._SalaryAdvanceEmployeeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_SalaryAdvance", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.SalaryAdvances.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvances.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvance", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.SalaryAdvances.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvances.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvance1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.SalaryAdvances1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvances1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalaryAdvanceEmployeeDetails(SalaryAdvanceEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.SalaryAdvance = this;
		}
		
		private void detach_SalaryAdvanceEmployeeDetails(SalaryAdvanceEmployeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.SalaryAdvance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalaryAdvanceEmployeeDetails")]
	public partial class SalaryAdvanceEmployeeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalAdvEmpID;
		
		private int _SalaryAdvanceID;
		
		private System.Nullable<int> _EmpID;
		
		private System.Nullable<double> _RequestAmount;
		
		private System.Nullable<double> _EPFSal;
		
		private System.Nullable<double> _DayWages;
		
		private System.Nullable<double> _FixedInsentive;
		
		private System.Nullable<double> _VariableInsentive;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SalaryAdvance> _SalaryAdvance;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalAdvEmpIDChanging(int value);
    partial void OnSalAdvEmpIDChanged();
    partial void OnSalaryAdvanceIDChanging(int value);
    partial void OnSalaryAdvanceIDChanged();
    partial void OnEmpIDChanging(System.Nullable<int> value);
    partial void OnEmpIDChanged();
    partial void OnRequestAmountChanging(System.Nullable<double> value);
    partial void OnRequestAmountChanged();
    partial void OnEPFSalChanging(System.Nullable<double> value);
    partial void OnEPFSalChanged();
    partial void OnDayWagesChanging(System.Nullable<double> value);
    partial void OnDayWagesChanged();
    partial void OnFixedInsentiveChanging(System.Nullable<double> value);
    partial void OnFixedInsentiveChanged();
    partial void OnVariableInsentiveChanging(System.Nullable<double> value);
    partial void OnVariableInsentiveChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalaryAdvanceEmployeeDetail()
		{
			this._Employee = default(EntityRef<Employee>);
			this._SalaryAdvance = default(EntityRef<SalaryAdvance>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalAdvEmpID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalAdvEmpID
		{
			get
			{
				return this._SalAdvEmpID;
			}
			set
			{
				if ((this._SalAdvEmpID != value))
				{
					this.OnSalAdvEmpIDChanging(value);
					this.SendPropertyChanging();
					this._SalAdvEmpID = value;
					this.SendPropertyChanged("SalAdvEmpID");
					this.OnSalAdvEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryAdvanceID", DbType="Int NOT NULL")]
		public int SalaryAdvanceID
		{
			get
			{
				return this._SalaryAdvanceID;
			}
			set
			{
				if ((this._SalaryAdvanceID != value))
				{
					if (this._SalaryAdvance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalaryAdvanceIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryAdvanceID = value;
					this.SendPropertyChanged("SalaryAdvanceID");
					this.OnSalaryAdvanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="Int")]
		public System.Nullable<int> EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestAmount", DbType="Float")]
		public System.Nullable<double> RequestAmount
		{
			get
			{
				return this._RequestAmount;
			}
			set
			{
				if ((this._RequestAmount != value))
				{
					this.OnRequestAmountChanging(value);
					this.SendPropertyChanging();
					this._RequestAmount = value;
					this.SendPropertyChanged("RequestAmount");
					this.OnRequestAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPFSal", DbType="Float")]
		public System.Nullable<double> EPFSal
		{
			get
			{
				return this._EPFSal;
			}
			set
			{
				if ((this._EPFSal != value))
				{
					this.OnEPFSalChanging(value);
					this.SendPropertyChanging();
					this._EPFSal = value;
					this.SendPropertyChanged("EPFSal");
					this.OnEPFSalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayWages", DbType="Float")]
		public System.Nullable<double> DayWages
		{
			get
			{
				return this._DayWages;
			}
			set
			{
				if ((this._DayWages != value))
				{
					this.OnDayWagesChanging(value);
					this.SendPropertyChanging();
					this._DayWages = value;
					this.SendPropertyChanged("DayWages");
					this.OnDayWagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedInsentive", DbType="Float")]
		public System.Nullable<double> FixedInsentive
		{
			get
			{
				return this._FixedInsentive;
			}
			set
			{
				if ((this._FixedInsentive != value))
				{
					this.OnFixedInsentiveChanging(value);
					this.SendPropertyChanging();
					this._FixedInsentive = value;
					this.SendPropertyChanged("FixedInsentive");
					this.OnFixedInsentiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariableInsentive", DbType="Float")]
		public System.Nullable<double> VariableInsentive
		{
			get
			{
				return this._VariableInsentive;
			}
			set
			{
				if ((this._VariableInsentive != value))
				{
					this.OnVariableInsentiveChanging(value);
					this.SendPropertyChanging();
					this._VariableInsentive = value;
					this.SendPropertyChanged("VariableInsentive");
					this.OnVariableInsentiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryAdvanceEmployeeDetail", Storage="_Employee", ThisKey="EmpID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SalaryAdvanceEmployeeDetails.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvanceEmployeeDetails.Add(this);
						this._EmpID = value.EmployeeID;
					}
					else
					{
						this._EmpID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalaryAdvance_SalaryAdvanceEmployeeDetail", Storage="_SalaryAdvance", ThisKey="SalaryAdvanceID", OtherKey="SalaryAdvanceID", IsForeignKey=true)]
		public SalaryAdvance SalaryAdvance
		{
			get
			{
				return this._SalaryAdvance.Entity;
			}
			set
			{
				SalaryAdvance previousValue = this._SalaryAdvance.Entity;
				if (((previousValue != value) 
							|| (this._SalaryAdvance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalaryAdvance.Entity = null;
						previousValue.SalaryAdvanceEmployeeDetails.Remove(this);
					}
					this._SalaryAdvance.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvanceEmployeeDetails.Add(this);
						this._SalaryAdvanceID = value.SalaryAdvanceID;
					}
					else
					{
						this._SalaryAdvanceID = default(int);
					}
					this.SendPropertyChanged("SalaryAdvance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvanceEmployeeDetail", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.SalaryAdvanceEmployeeDetails.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvanceEmployeeDetails.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvanceEmployeeDetail1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.SalaryAdvanceEmployeeDetails1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvanceEmployeeDetails1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PieceRateDetails")]
	public partial class PieceRateDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PieceRateID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Catagory;
		
		private string _MeasuredUnit;
		
		private System.Nullable<double> _UnitRate;
		
		private System.Nullable<int> _DepartmentID;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<EnteredPieceRateForEmployee> _EnteredPieceRateForEmployees;
		
		private EntitySet<AvaragePieceRateForEmployee> _AvaragePieceRateForEmployees;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPieceRateIDChanging(int value);
    partial void OnPieceRateIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnCatagoryChanging(string value);
    partial void OnCatagoryChanged();
    partial void OnMeasuredUnitChanging(string value);
    partial void OnMeasuredUnitChanged();
    partial void OnUnitRateChanging(System.Nullable<double> value);
    partial void OnUnitRateChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public PieceRateDetail()
		{
			this._EnteredPieceRateForEmployees = new EntitySet<EnteredPieceRateForEmployee>(new Action<EnteredPieceRateForEmployee>(this.attach_EnteredPieceRateForEmployees), new Action<EnteredPieceRateForEmployee>(this.detach_EnteredPieceRateForEmployees));
			this._AvaragePieceRateForEmployees = new EntitySet<AvaragePieceRateForEmployee>(new Action<AvaragePieceRateForEmployee>(this.attach_AvaragePieceRateForEmployees), new Action<AvaragePieceRateForEmployee>(this.detach_AvaragePieceRateForEmployees));
			this._Department = default(EntityRef<Department>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceRateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PieceRateID
		{
			get
			{
				return this._PieceRateID;
			}
			set
			{
				if ((this._PieceRateID != value))
				{
					this.OnPieceRateIDChanging(value);
					this.SendPropertyChanging();
					this._PieceRateID = value;
					this.SendPropertyChanged("PieceRateID");
					this.OnPieceRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catagory", DbType="VarChar(500)")]
		public string Catagory
		{
			get
			{
				return this._Catagory;
			}
			set
			{
				if ((this._Catagory != value))
				{
					this.OnCatagoryChanging(value);
					this.SendPropertyChanging();
					this._Catagory = value;
					this.SendPropertyChanged("Catagory");
					this.OnCatagoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasuredUnit", DbType="VarChar(50)")]
		public string MeasuredUnit
		{
			get
			{
				return this._MeasuredUnit;
			}
			set
			{
				if ((this._MeasuredUnit != value))
				{
					this.OnMeasuredUnitChanging(value);
					this.SendPropertyChanging();
					this._MeasuredUnit = value;
					this.SendPropertyChanged("MeasuredUnit");
					this.OnMeasuredUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitRate", DbType="Float")]
		public System.Nullable<double> UnitRate
		{
			get
			{
				return this._UnitRate;
			}
			set
			{
				if ((this._UnitRate != value))
				{
					this.OnUnitRateChanging(value);
					this.SendPropertyChanging();
					this._UnitRate = value;
					this.SendPropertyChanged("UnitRate");
					this.OnUnitRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PieceRateDetail_EnteredPieceRateForEmployee", Storage="_EnteredPieceRateForEmployees", ThisKey="PieceRateID", OtherKey="PieceRateID")]
		public EntitySet<EnteredPieceRateForEmployee> EnteredPieceRateForEmployees
		{
			get
			{
				return this._EnteredPieceRateForEmployees;
			}
			set
			{
				this._EnteredPieceRateForEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PieceRateDetail_AvaragePieceRateForEmployee", Storage="_AvaragePieceRateForEmployees", ThisKey="PieceRateID", OtherKey="PieceRateID")]
		public EntitySet<AvaragePieceRateForEmployee> AvaragePieceRateForEmployees
		{
			get
			{
				return this._AvaragePieceRateForEmployees;
			}
			set
			{
				this._AvaragePieceRateForEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_PieceRateDetail", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.PieceRateDetails.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.PieceRateDetails.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_PieceRateDetail", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.PieceRateDetails.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.PieceRateDetails.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_PieceRateDetail1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.PieceRateDetails1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.PieceRateDetails1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnteredPieceRateForEmployees(EnteredPieceRateForEmployee entity)
		{
			this.SendPropertyChanging();
			entity.PieceRateDetail = this;
		}
		
		private void detach_EnteredPieceRateForEmployees(EnteredPieceRateForEmployee entity)
		{
			this.SendPropertyChanging();
			entity.PieceRateDetail = null;
		}
		
		private void attach_AvaragePieceRateForEmployees(AvaragePieceRateForEmployee entity)
		{
			this.SendPropertyChanging();
			entity.PieceRateDetail = this;
		}
		
		private void detach_AvaragePieceRateForEmployees(AvaragePieceRateForEmployee entity)
		{
			this.SendPropertyChanging();
			entity.PieceRateDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnteredPieceRateForEmployees")]
	public partial class EnteredPieceRateForEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EPRID;
		
		private int _PieceRateID;
		
		private int _EmployeeID;
		
		private double _PieceQty;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<PieceRateDetail> _PieceRateDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEPRIDChanging(int value);
    partial void OnEPRIDChanged();
    partial void OnPieceRateIDChanging(int value);
    partial void OnPieceRateIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnPieceQtyChanging(double value);
    partial void OnPieceQtyChanged();
    #endregion
		
		public EnteredPieceRateForEmployee()
		{
			this._Employee = default(EntityRef<Employee>);
			this._PieceRateDetail = default(EntityRef<PieceRateDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPRID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EPRID
		{
			get
			{
				return this._EPRID;
			}
			set
			{
				if ((this._EPRID != value))
				{
					this.OnEPRIDChanging(value);
					this.SendPropertyChanging();
					this._EPRID = value;
					this.SendPropertyChanged("EPRID");
					this.OnEPRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceRateID", DbType="Int NOT NULL")]
		public int PieceRateID
		{
			get
			{
				return this._PieceRateID;
			}
			set
			{
				if ((this._PieceRateID != value))
				{
					if (this._PieceRateDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPieceRateIDChanging(value);
					this.SendPropertyChanging();
					this._PieceRateID = value;
					this.SendPropertyChanged("PieceRateID");
					this.OnPieceRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceQty", DbType="Float NOT NULL")]
		public double PieceQty
		{
			get
			{
				return this._PieceQty;
			}
			set
			{
				if ((this._PieceQty != value))
				{
					this.OnPieceQtyChanging(value);
					this.SendPropertyChanging();
					this._PieceQty = value;
					this.SendPropertyChanged("PieceQty");
					this.OnPieceQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EnteredPieceRateForEmployee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EnteredPieceRateForEmployees.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EnteredPieceRateForEmployees.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PieceRateDetail_EnteredPieceRateForEmployee", Storage="_PieceRateDetail", ThisKey="PieceRateID", OtherKey="PieceRateID", IsForeignKey=true)]
		public PieceRateDetail PieceRateDetail
		{
			get
			{
				return this._PieceRateDetail.Entity;
			}
			set
			{
				PieceRateDetail previousValue = this._PieceRateDetail.Entity;
				if (((previousValue != value) 
							|| (this._PieceRateDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PieceRateDetail.Entity = null;
						previousValue.EnteredPieceRateForEmployees.Remove(this);
					}
					this._PieceRateDetail.Entity = value;
					if ((value != null))
					{
						value.EnteredPieceRateForEmployees.Add(this);
						this._PieceRateID = value.PieceRateID;
					}
					else
					{
						this._PieceRateID = default(int);
					}
					this.SendPropertyChanged("PieceRateDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AvaragePieceRateForEmployees")]
	public partial class AvaragePieceRateForEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _APRID;
		
		private System.Nullable<int> _PieceRateID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<double> _AvaragePayment;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<PieceRateDetail> _PieceRateDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAPRIDChanging(int value);
    partial void OnAPRIDChanged();
    partial void OnPieceRateIDChanging(System.Nullable<int> value);
    partial void OnPieceRateIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnAvaragePaymentChanging(System.Nullable<double> value);
    partial void OnAvaragePaymentChanged();
    #endregion
		
		public AvaragePieceRateForEmployee()
		{
			this._Employee = default(EntityRef<Employee>);
			this._PieceRateDetail = default(EntityRef<PieceRateDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APRID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int APRID
		{
			get
			{
				return this._APRID;
			}
			set
			{
				if ((this._APRID != value))
				{
					this.OnAPRIDChanging(value);
					this.SendPropertyChanging();
					this._APRID = value;
					this.SendPropertyChanged("APRID");
					this.OnAPRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceRateID", DbType="Int")]
		public System.Nullable<int> PieceRateID
		{
			get
			{
				return this._PieceRateID;
			}
			set
			{
				if ((this._PieceRateID != value))
				{
					if (this._PieceRateDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPieceRateIDChanging(value);
					this.SendPropertyChanging();
					this._PieceRateID = value;
					this.SendPropertyChanged("PieceRateID");
					this.OnPieceRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvaragePayment", DbType="Float")]
		public System.Nullable<double> AvaragePayment
		{
			get
			{
				return this._AvaragePayment;
			}
			set
			{
				if ((this._AvaragePayment != value))
				{
					this.OnAvaragePaymentChanging(value);
					this.SendPropertyChanging();
					this._AvaragePayment = value;
					this.SendPropertyChanged("AvaragePayment");
					this.OnAvaragePaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AvaragePieceRateForEmployee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.AvaragePieceRateForEmployees.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.AvaragePieceRateForEmployees.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PieceRateDetail_AvaragePieceRateForEmployee", Storage="_PieceRateDetail", ThisKey="PieceRateID", OtherKey="PieceRateID", IsForeignKey=true)]
		public PieceRateDetail PieceRateDetail
		{
			get
			{
				return this._PieceRateDetail.Entity;
			}
			set
			{
				PieceRateDetail previousValue = this._PieceRateDetail.Entity;
				if (((previousValue != value) 
							|| (this._PieceRateDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PieceRateDetail.Entity = null;
						previousValue.AvaragePieceRateForEmployees.Remove(this);
					}
					this._PieceRateDetail.Entity = value;
					if ((value != null))
					{
						value.AvaragePieceRateForEmployees.Add(this);
						this._PieceRateID = value.PieceRateID;
					}
					else
					{
						this._PieceRateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PieceRateDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FingerPrintDivices")]
	public partial class FingerPrintDivice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeviceID;
		
		private string _DeviceName;
		
		private System.Nullable<int> _CommunicationType;
		
		private string _IPAddress;
		
		private System.Nullable<int> _IPPort;
		
		private System.Nullable<int> _Password;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeviceIDChanging(int value);
    partial void OnDeviceIDChanged();
    partial void OnDeviceNameChanging(string value);
    partial void OnDeviceNameChanged();
    partial void OnCommunicationTypeChanging(System.Nullable<int> value);
    partial void OnCommunicationTypeChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnIPPortChanging(System.Nullable<int> value);
    partial void OnIPPortChanged();
    partial void OnPasswordChanging(System.Nullable<int> value);
    partial void OnPasswordChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public FingerPrintDivice()
		{
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceName", DbType="VarChar(500)")]
		public string DeviceName
		{
			get
			{
				return this._DeviceName;
			}
			set
			{
				if ((this._DeviceName != value))
				{
					this.OnDeviceNameChanging(value);
					this.SendPropertyChanging();
					this._DeviceName = value;
					this.SendPropertyChanged("DeviceName");
					this.OnDeviceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunicationType", DbType="Int")]
		public System.Nullable<int> CommunicationType
		{
			get
			{
				return this._CommunicationType;
			}
			set
			{
				if ((this._CommunicationType != value))
				{
					this.OnCommunicationTypeChanging(value);
					this.SendPropertyChanging();
					this._CommunicationType = value;
					this.SendPropertyChanged("CommunicationType");
					this.OnCommunicationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="VarChar(15)")]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPPort", DbType="Int")]
		public System.Nullable<int> IPPort
		{
			get
			{
				return this._IPPort;
			}
			set
			{
				if ((this._IPPort != value))
				{
					this.OnIPPortChanging(value);
					this.SendPropertyChanging();
					this._IPPort = value;
					this.SendPropertyChanged("IPPort");
					this.OnIPPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Int")]
		public System.Nullable<int> Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FingerPrintDivice", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.FingerPrintDivices.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.FingerPrintDivices.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FingerPrintDivice1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.FingerPrintDivices1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.FingerPrintDivices1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
